
#define osObjectsPublic                     // define objects in main module
#include "osObjects.h"                      // RTOS object definitions
#include "Driver_USART.h"               // ::CMSIS Driver:USART


extern ARM_DRIVER_USART Driver_USART1;

osThreadId ID_tache1;
osThreadId ID_tache2;

int data;

void tache1 (void const * argument);
void tache2 (void const * argument);

void Init_UART1(void);
void Init_DFPlayer(void);
void LectureDFPlayer(char num_son);

osThreadDef (tache1 ,osPriorityNormal , 1,0);
osThreadDef (tache2 ,osPriorityNormal , 1,0);

osMailQId ID_BAL;
osMailQDef(BAL,16,data);

void Init_UART1(void){
	Driver_USART1.Initialize(NULL);
	Driver_USART1.PowerControl(ARM_POWER_FULL);
	Driver_USART1.Control(	ARM_USART_MODE_ASYNCHRONOUS |
							ARM_USART_DATA_BITS_8		|
							ARM_USART_STOP_BITS_1		|
							ARM_USART_PARITY_NONE		|
							ARM_USART_FLOW_CONTROL_NONE,
							9600);
	Driver_USART1.Control(ARM_USART_CONTROL_TX,1);
	Driver_USART1.Control(ARM_USART_CONTROL_RX,1);
}

void Init_DFPlayer(void){
	uint8_t tab[10]={0x7E,0xFF,0x06,0x09,0x00,0x00,0x01,0x00,0x00,0xEF}; //cmd->0x09 specify source TF card slot
	short checksum;
	char checksumH,checksumL;
	
	checksum=0-(tab[1]+tab[2]+tab[3]+tab[4]+tab[5]+tab[6]);
	checksumH=(char)((checksum & 0xFF00)>>8);
	checksumL=(char)checksum;
	
	tab[7]=checksumH;
	tab[8]=checksumL;
	
	while(Driver_USART1.GetStatus().tx_busy == 1); // attente buffer TX vide
	Driver_USART1.Send(tab,80);

	tab[3]=0x06;	// cmd -> specify volume
	tab[6]=0x10;

	checksum=0-(tab[1]+tab[2]+tab[3]+tab[4]+tab[5]+tab[6]);
	checksumH=(char)((checksum & 0xFF00)>>8);
	checksumL=(char)checksum;
		
	tab[7]=checksumH;
	tab[8]=checksumL;
		
	while(Driver_USART1.GetStatus().tx_busy == 1); // attente buffer TX vide
	Driver_USART1.Send(tab,80);	

		
}

void LectureDFPlayer(char num_son){
	uint8_t tab[10]={0x7E,0xFF,0x06,0x00,0x00,0x00,0x01,0x00,0x00,0xEF}; 
	short checksum;
	char checksumH,checksumL;
	
	tab[3]=0x03; // cmd -> specify tracking
	tab[6]=num_son;

	checksum=0-(tab[1]+tab[2]+tab[3]+tab[4]+tab[5]+tab[6]);
	checksumH=(char)((checksum & 0xFF00)>>8);
	checksumL=(char)checksum;
		
	tab[7]=checksumH;
	tab[8]=checksumL;
		
	while(Driver_USART1.GetStatus().tx_busy == 1); // attente buffer TX vide
	Driver_USART1.Send(tab,80);	
		
	tab[3]=0x0D;	// cmd -> Playback sound
	tab[6]=0x00;

	checksum=0-(tab[1]+tab[2]+tab[3]+tab[4]+tab[5]+tab[6]);
	checksumH=(char)((checksum & 0xFF00)>>8);
	checksumL=(char)checksum;
		
	tab[7]=checksumH;
	tab[8]=checksumL;
		
	while(Driver_USART1.GetStatus().tx_busy == 1); // attente buffer TX vide
	Driver_USART1.Send(tab,80);
	
}

void tache1 (void const * argument)
{

	char *recep;
	char num_son;
	osEvent EVretour;
	
	osSignalWait(0x40,osWaitForever);
	
	EVretour = osMailGet(ID_BAL,osWaitForever);
	recep=EVretour.value.p;
	num_son=*recep;
	osMailFree(ID_BAL,recep);
	
	LectureDFPlayer(num_son);

}

void tache2 (void const * argument)
{

	char num_son = 0x03;	
	int *ptr;
	
	while(1)
	{

		ptr=osMailAlloc(ID_BAL,osWaitForever);
		*ptr=num_son;
		osMailPut(ID_BAL,ptr);
		osSignalSet(ID_tache1,0x40);
		osDelay(20000);

	}
}

int main (void){
	osKernelInitialize ();                    // initialize CMSIS-RTOS
	ID_tache1=osThreadCreate (osThread (tache1) , NULL);
	ID_tache2=osThreadCreate (osThread (tache2) , NULL);
	ID_BAL=osMailCreate(osMailQ(BAL),NULL);
	
	Init_UART1();
	Init_DFPlayer();
	
	//osSignalSet(ID_tache1,0x004);
	
  osKernelStart ();                         // start thread execution
	osDelay(osWaitForever);	
	return 0;
}


